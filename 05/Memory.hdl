// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

//到處複製來的，有些交給chatgpt修改，有些是chatgpt生成的
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // RAM: Address space for general-purpose memory (0x0000 - 0x3FFF).
    RAM16K(in=in, load=ramLoad, address=address[0..13], out=ramOut);

    // Screen: Address space for memory-mapped screen (0x4000 - 0x5FFF).
    Screen(in=in, load=screenLoad, address=address[0..12], out=screenOut);

    // Keyboard: Address space for memory-mapped keyboard (0x6000).
    Keyboard(out=keyboardOut);

    // Determine the appropriate memory range:
    // If address < 0x4000, use RAM.
    // If 0x4000 <= address < 0x6000, use Screen.
    // If address == 0x6000, use Keyboard.
    Or(a=address[14], b=address[13], out=screenOrKeyboard);
    Not(in=screenOrKeyboard, out=ramEnable);

    // Screen load control: address in the range 0x4000 - 0x5FFF.
    And(a=address[14], b=notAddress13, out=screenEnable);

    // Keyboard output control: address == 0x6000.
    And(a=address[14], b=address[13], out=keyboardEnable);

    // Load signals for RAM, Screen, and Keyboard.
    And(a=ramEnable, b=load, out=ramLoad);
    And(a=screenEnable, b=load, out=screenLoad);

    // Output Mux: Selects the correct output based on the address.
    Mux16(a=ramOut, b=screenOut, sel=screenEnable, out=ramOrScreenOut);
    Mux16(a=ramOrScreenOut, b=keyboardOut, sel=keyboardEnable, out=out);
}