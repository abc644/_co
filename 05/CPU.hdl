// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

//到處複製來的，有些交給chatgpt修改，有些是chatgpt生成的
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A Register
    // Select the value to load into A:
    //   If instruction[15] == 0: load instruction directly (A-instruction).
    //   If instruction[15] == 1: load ALU result (C-instruction).
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aMuxOut);
    ARegister(in=aMuxOut, load=aLoad, out=aOut, out[0..14]=addressM);

    // D Register
    // Holds the ALU result if the D-register is the destination.
    DRegister(in=aluOut, load=dLoad, out=dOut);

    // ALU
    // Compute the ALU operation using D register (x) and M or A (y).
    Mux16(a=aOut, b=inM, sel=instruction[12], out=aluY);
    ALU(x=dOut, y=aluY, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        out=aluOut, zr=aluZr, ng=aluNg);

    // Memory Write Control
    // writeM is asserted if M is the destination (instruction[3] == 1).
    And(a=instruction[3], b=instruction[15], out=writeM);
    // ALU output to M
    And16(a=aluOut, b=true, out=outM);

    // Program Counter (PC)
    // Calculate whether to jump based on the jump bits and ALU flags.
    // JUMP = (instruction[0] & ALU output negative) OR
    //        (instruction[1] & ALU output zero) OR
    //        (instruction[2] & ALU output positive)
    Not(in=aluNg, out=notNg);
    Or(a=aluZr, b=notNg, out=aluPos);
    And(a=instruction[2], b=aluPos, out=jmpPos);
    And(a=instruction[1], b=aluZr, out=jmpZero);
    And(a=instruction[0], b=aluNg, out=jmpNeg);
    Or(a=jmpPos, b=jmpZero, out=jmpNonNeg);
    Or(a=jmpNonNeg, b=jmpNeg, out=pcJump);

    // Update PC
    // If reset == 1, PC is set to 0.
    // Else, if pcJump == 1, PC loads A register's value.
    // Otherwise, PC increments normally.
    PC(in=aOut, load=pcJump, inc=true, reset=reset, out=pc);

    // Load Controls
    // aLoad: A-register load.
    // dLoad: D-register load.
    Or(a=instruction[5], b=instruction[4], out=aLoad);
    Or(a=instruction[4], b=instruction[3], out=dLoad);
}